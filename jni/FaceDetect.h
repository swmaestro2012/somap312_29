/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <android/log.h>

#include <vector>
#include <stdio.h>
#include <math.h>

#include <opencv/cv.h>
#include <opencv/highgui.h>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/features2d/features2d.hpp>
/* Header for class FaceDetect_native_main_Native_Detect */
using namespace std;
using namespace cv;

class FacesSubData {
public:
	vector<CvRect*> faceDatas;

public:
	FacesSubData() {
	}

	~FacesSubData() {
		//CvRect* r = (CvRect*) cvGetSeqElem(faces, i); 주소를 복사해서
		__android_log_print(ANDROID_LOG_INFO, "~FacesSubData", "~FacesSubData");
		faceDatas.clear();
	}
};

class FaceSortStack {
public:
	vector<CvRect*> faceDatas;

public:
	FaceSortStack() {
	}
	void push(CvRect* faceRect) {
		int i;
		for (i = 0; i < faceDatas.size(); i++) {
			if (faceDatas[i]->x > faceRect->x) {
				break;
			}
		}
		faceDatas.insert(faceDatas.begin() + i, faceRect);
	}
	~FaceSortStack() {
		__android_log_print(ANDROID_LOG_INFO, "~FaceSortStack",
				"~FaceSortStack");
		faceDatas.clear();
	}
};

class FaceMatchingDatas {
public:
	vector<CvPoint> faces;
public:
	~FaceMatchingDatas() {
		faces.clear();
	}
};

extern "C" {

static vector<FacesSubData*> lastFrameFaceDataRect;
static CvSeq* faces = NULL;
static vector<FaceMatchingDatas*> faceMatchings;
FacesSubData* faceSubData;
FaceSortStack* faceSortStack;

//init
static CvHaarClassifierCascade* cascade = NULL;
static CvMemStorage* storage = NULL;
jintArray jintArr;
jbyteArray jbyteArr;
int rateNum = 2;

//SURF
CvSeq* objectKeypoints = 0, *objectDescriptors = 0;
vector<CvSeq*> imageKeypointsDatas, imageDescriptorsDatas;
int keypoint_index = 0;
CvSURFParams params;

int SURFrange = 600;

void setBrightnessValue(IplImage* source, IplImage* target);
void SaveSubFaces(IplImage* img_base, CvSeq* faces, int i, int width,
		int height);
int FindFaceDetectHaar(IplImage* img_src, IplImage* img_grey, int flag,
		int width, int height);
int FindYCrCbSkinColorFilter(IplImage* DestFrame);
int FaceFilter(IplImage* DestFrame, CvRect* r);
void CvRectEdit(CvRect* r, int rateNum);
void dispose(JNIEnv* env);
//change
void TemplateMatching_init();
JNIEXPORT void JNICALL Java_test_ImageProcessing_ImageProcessing_TemplateMatching
(JNIEnv* env, jobject thiz, jint width, jint height, jintArray rgba_currentFrame, jbyteArray surf_beforeFrame, jint frameNum, jint faceNum, jint rangeX, jint rangeX1);

void faceInpaint(int width, Mat& mbgra_current, int faceX, int faceY,
		int faceWidth, int faceHeight);
void cvColorTransfer(unsigned char* _BGRMat, unsigned char* _targetBGRMat,
		int width, int height);

double compareSURFDescriptors(const float* d1, const float* d2, double best,
		int length);
int naiveNearestNeighbor(const float* vec, int laplacian,
		const CvSeq* model_keypoints, const CvSeq* model_descriptors);
void findPairs(const CvSeq* objectKeypoints, const CvSeq* objectDescriptors,
		const CvSeq* imageKeypoints, const CvSeq* imageDescriptors,
		vector<int>& ptpairs);
void flannFindPairs(const CvSeq*, const CvSeq* objectDescriptors, const CvSeq*,
		const CvSeq* imageDescriptors, vector<int>& ptpairs);
int locatePlanarObject(const CvSeq* objectKeypoints,
		const CvSeq* objectDescriptors, const CvSeq* imageKeypoints,
		const CvSeq* imageDescriptors,
		/*const CvPoint src_corners[4], CvPoint dst_corners[4],*/CvMat& _h);
JNIEXPORT void JNICALL Java_test_ImageProcessing_ImageProcessing_SURFobjectSelect
(JNIEnv* env, jobject thiz, jint lastFrameNum);
JNIEXPORT void JNICALL Java_test_ImageProcessing_ImageProcessing_SURFframeFind
(JNIEnv* env, jobject thiz, jint width, jint height, jintArray beforeFrame);
JNIEXPORT void JNICALL Java_test_ImageProcessing_ImageProcessing_SURFgetFrame
(JNIEnv* env, jobject thiz, jint width, jint height, jintArray beforeFrame, jbyteArray surf_beforeFrame, jint frameNum);
JNIEXPORT void JNICALL Java_test_ImageProcessing_ImageProcessing_SURFface
(JNIEnv* env, jobject thiz, jint width, jint height, jintArray rgba_currentFrame, jbyteArray yuv_beforeFrame, jbyteArray surf_beforeFrame,
		jint frameNum, jint faceNum);
JNIEXPORT void JNICALL Java_test_ImageProcessing_ImageProcessing_SURFChange
(JNIEnv* env, jobject thiz, jint width, jint height, jintArray rgba_currentFrame, jbyteArray surf_beforeFrame, jint frameNum, jint faceNum);

JNIEXPORT jintArray JNICALL Java_test_ImageProcessing_ImageProcessing_GetLastFrame(
		JNIEnv* env, jobject thiz, jint width, jint height, jbyteArray yuv);
JNIEXPORT jintArray JNICALL Java_test_ImageProcessing_ImageProcessing_LastFrameFace(
		JNIEnv* env, jobject thiz, jint width, jint height, jintArray bgra);

JNIEXPORT void JNICALL Java_test_ImageProcessing_ImageProcessing_DisposeNative(JNIEnv* env, jobject thiz);
JNIEXPORT void JNICALL Java_test_ImageProcessing_ImageProcessing_InitFace(JNIEnv* env, jobject thiz);
JNIEXPORT void JNICALL Java_test_ImageProcessing_ImageProcessing_SetCustomRect
(JNIEnv* env, jobject thiz, jint faceX, jint faceY, jint faceWidth, jint faceHeight);

}
